#!/usr/bin/env ruby

# Will require rflow after option parsing to speed up a couple of
# startup cases (version and help) that don't need it
require 'optparse'

options = {
  :daemonize => true,
  :startup_log_level => :WARN,
  :extensions_file_paths => [],
  :gems => []
}

option_parser = OptionParser.new do |opts|
  opts.banner = <<EOB
Usage: #{File.basename $0} [options] (start|stop|status)
EOB

  opts.on("-d", "--database DB", "Config database (sqlite) path (GENERALLY REQUIRED)") do |db|
    options[:config_database_path] = File.expand_path(db)
  end

  opts.on("-c", "--config CONFIG", "Config file path") do |config|
    options[:config_file_path] = File.expand_path(config)
  end

  opts.on("-e", "--extensions FILE1[,FILE_N]", Array, "Extension file paths (will load)") do |extensions|
    options[:extensions_file_paths] += extensions.map {|extension| File.expand_path(extension)}
  end
  
  opts.on("-g", "--gems GEM1[,GEM_N]", Array, "Extension gems (will require)") do |gems|
    options[:gems] += gems
  end
  
  opts.on("-l", "--log LOGFILE", "Initial startup log file (in addition to stdout)") do |log|
    options[:startup_log_file_path] = File.expand_path(log)
  end

  opts.on("-v", "--verbose [LEVEL]", [:DEBUG, :INFO, :WARN], "Control the startup log (and stdout) verbosity (DEBUG, INFO, WARN) defaults to WARN") do |level|
    options[:startup_log_level] = level || :DEBUG
  end

  opts.on("-f", "Run in the foreground") do |f|
    options[:daemonize] = false
  end

  opts.on_tail("--version", "Show RFlow version and exit") do
    require 'rflow/version'
    puts RFlow::VERSION
    exit 0
  end
  
  opts.on_tail("-h", "--help", "Show this message and exit") do
    puts opts
    exit 0
  end
  
end

begin
  option_parser.parse!
rescue Exception => e
  STDERR.puts "Error processing arguments: #{e.class}: #{e.message}"
  exit 1
end

# Now require rflow because the following parts of the startup require
# pieces (usually RFlow::Configuration or RFlow.logger)
require 'rflow'

# Set up the startup logging, which is distinct from the runtime
# logging that is defined in the config database.  The startup logging
# will always go to STDOUT, as well as to the 
startup_logger = Log4r::Logger.new 'startup'
startup_logger.add Log4r::StdoutOutputter.new('startup_stdout', :formatter => RFlow::LOG_PATTERN_FORMATTER)
startup_logger.level = Log4r::LNAMES.index options[:startup_log_level].to_s

if options[:startup_log_file_path]
  begin
    startup_logger.add Log4r::FileOutputter.new('startup_file', :filename => options[:startup_log_file_path], :formatter => RFlow::LOG_PATTERN_FORMATTER)
  rescue Exception => e
    startup_logger.fatal "Log file '#{options[:startup_log_file_path]}' problem: #{e.message}"
    exit 1
  end
end

command = ARGV[0]
unless ['start', 'stop', 'status'].include? command
  startup_logger.fatal "Command needs to be one of [start|stop|status]\n#{option_parser.help}"
  exit 1
end


unless options[:config_database_path]
  startup_logger.warn "Config database not specified, using default 'config.sqlite'"
  options[:config_database_path] = File.expand_path(File.join(Dir.getwd, 'config.sqlite'))
end

# Set the standard logger to the startup one in the case that we need
# to call into RFlow to check on or setup things, like the config
# database.  We want those log messages to go to the startup log when
# setting up.  The running log will transition to what is specified in
# the config database
RFlow.logger = startup_logger


# If the config file was specified, load a new database with it.
if options[:config_file_path]
  unless File.exist? options[:config_file_path]
    startup_logger.fatal "Config file '#{options[:config_file_path]}' not found\n#{option_parser.help}"
    exit 1
  end

  unless File.readable? options[:config_file_path]
    startup_logger.fatal "Config file '#{options[:config_file_path]}' not readable\n#{option_parser.help}"
    exit 1
  end

  if File.exist? options[:config_database_path]
    startup_logger.fatal "Config database '#{options[:config_database_path]}' exists, exiting to prevent accidental overwrite from config file '#{options[:config_file_path]}'"
    exit 1
  end
end


# Initialize the configuration database, if needed
unless File.exist? options[:config_database_path]
  startup_logger.warn "Config database '#{options[:config_database_path]}' not found, creating"
  begin
    RFlow::Configuration::initialize_database(options[:config_database_path], options[:config_file_path])
  rescue Exception => e
    startup_logger.fatal "Error initializing configuration database: #{e.message}: #{e.backtrace.join "\n"}"
    exit 1
  end
end

# Check to make sure config database exists and is readable
unless File.readable? options[:config_database_path]
  startup_logger.fatal "Config database ('#{Dir.getwd}') '#{options[:config_database_path]}' not reabable\n#{option_parser.help}"
  exit 1
end


# Figure out what was asked of us, default to 'start'
# TODO: clean this up ... it is sooo ugly
case command
when 'start', 'stop', 'status'
  config = RFlow::Configuration.new(options[:config_database_path])
  Dir.chdir(File.dirname(options[:config_database_path]))
  pid = RFlow.running_pid_file_path?(config['rflow.pid_file_path'])
  startup_logger.level = INFO
  if pid
    if command == 'stop'
      RFlow.logger.info "#{config['rflow.application_name']} running, process #{pid} found in #{File.expand_path(config['rflow.pid_file_path'])}, terminating"
      Process.kill 'INT', pid
    else
      RFlow.logger.info "#{config['rflow.application_name']} running, process #{pid} found in #{File.expand_path(config['rflow.pid_file_path'])}"
    end
    exit 0
  elsif command == 'status' || command == 'stop'
    RFlow.logger.warn "#{config['rflow.application_name']} process not found in #{File.expand_path(config['rflow.pid_file_path'])}"
    exit 1
  end
else
  RFlow.logger.error "Did not understand command '#{command}'"
  exit 1
end


# require all the gem extensions
options[:gems].each do |extension_gem|
  startup_logger.info "Requiring #{extension_gem}"
  require extension_gem
end


# load all the file extensions
options[:extensions_file_paths].each do |extensions_file_path|
  startup_logger.info "Loading #{extensions_file_path}"
  unless File.readable? extensions_file_path
    startup_logger.fatal "Extensions file ('#{Dir.getwd}') '#{extensions_file_path}' not reabable\n#{option_parser.help}"
    exit 1
  end
  load extensions_file_path
end


# Start the flow
begin
  RFlow.run options[:config_database_path], options[:daemonize]
rescue Exception => e
  startup_logger.fatal "Error running rflow: #{e.class}: #{e.message}"
end
  
__END__

# TODO: all the stuffs after here
# rflow <config file>
#   figure out a work directory
#   make sure that it has the right subdirectories (can be overridden)
#     run tmp logs schemas components
#   Set up logging to logs/rflow.log
#   Load all schemas
#   Verify all component installation
#   Initialize components
#   Start components running and make sure that they "daemonize" correctly
#     - place pid files in deployment's run directory
#   Configure components via zmq
#   Daemonize self
# 
# rflow init -- separate script
#   sets up the following directories
#     run/tmp/logs/schemas/components
